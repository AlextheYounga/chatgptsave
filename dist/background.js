var m=(c,t)=>()=>(t||c((t={exports:{}}).exports,t),t.exports);var p=m((k,d)=>{class f{constructor(t,n,r=["user","assistant","system"]){this.payload=t,this.markdownMessages=n,this.roles=r}compile(){var e;const t=(e=this.payload)==null?void 0:e.mapping;if(!t||typeof t!="object"||!this.markdownMessages||typeof this.markdownMessages!="object")return"";const n=this.extractTitle(this.payload),r=this.mapMessages(t);return this.renderMarkdown(r,n)}extractTitle(t){return typeof(t==null?void 0:t.title)=="string"?t.title.trim():""}mapMessages(t){const n=[];for(const r of Object.values(t)){const e=r==null?void 0:r.message;if(!e)continue;const s=(e==null?void 0:e.id)??null;if(!s)continue;const o=this.markdownMessages[s];o&&n.push({content:o,time:this.formatTimestamp(e==null?void 0:e.create_time),id:(e==null?void 0:e.id)??null,status:(e==null?void 0:e.status)??null})}return n}formatTimestamp(t){if(typeof t!="number"||Number.isNaN(t))return"unknown";const n=new Date(t*1e3);return Number.isNaN(n.getTime())?"unknown":n.toISOString().replace("T"," ").replace("Z"," UTC")}capitalize(t){return t?t.charAt(0).toUpperCase()+t.slice(1):""}renderMarkdown(t,n){const r=[];n&&r.push(`# ${n}


`);for(const e of t){const s=[];s.push(`> ${this.capitalize(e.role)} â€“ ${e.time}`),s.push(e.content),r.push(s.join(`
`))}return r.join(`

`)}}d.exports=f;const w=Object.freeze({download:"CHATGPT_SAVE_DOWNLOAD_REQUEST"});class h{handleMessage(t,n,r){if(this.isPlainObject(t)&&t.type===w.download)return this.processDownload(t.payload).then(e=>r({ok:!0,...e})).catch(e=>{console.error("ChatGPT Save: download request failed.",e),r({ok:!1,error:(e==null?void 0:e.message)||String(e)})}),!0}async processDownload(t){const n=this.normalizeFormat(t==null?void 0:t.format),r=this.requireConversation(t==null?void 0:t.openAIResponse),e=this.deriveFilenameBase(r);if(n==="markdown"){const i=(t==null?void 0:t.markdownMessages)||{},a=new f(r,i).compile()||"",l=`${e}.md`;return await this.triggerDownload(l,a,"text/markdown"),{format:n,filename:l}}const s=JSON.stringify(r,null,2),o=`${e}.json`;return await this.triggerDownload(o,s,"application/json"),{format:"json",filename:o}}normalizeFormat(t){return typeof t!="string"?"json":t.toLowerCase()==="markdown"?"markdown":"json"}requireConversation(t){if(!this.isPlainObject(t))throw new Error("openAI response payload missing or invalid.");return t}async triggerDownload(t,n,r){const e=await this.encodeDataUrl(n,r);await new Promise((s,o)=>{chrome.downloads.download({url:e,filename:t,saveAs:!1},i=>{var u;if(chrome.runtime.lastError||typeof i>"u"){o(new Error(((u=chrome.runtime.lastError)==null?void 0:u.message)||"Download failed."));return}s(i)})})}async encodeDataUrl(t,n){const e=await(t instanceof Blob?t:new Blob([t],{type:`${n};charset=utf-8`})).arrayBuffer(),s=new Uint8Array(e);let o="";const i=32768;for(let a=0;a<s.length;a+=i){const l=s.subarray(a,a+i);o+=String.fromCharCode.apply(null,l)}const u=btoa(o);return`data:${n};base64,${u}`}deriveFilenameBase(t){const n=[t.title,t.id,t.conversation_id];for(const r of n){const e=this.slugify(r);if(e)return e}return"chatgpt-conversation"}slugify(t){return typeof t!="string"?"":t.trim().toLowerCase().replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"")}isPlainObject(t){return t!==null&&typeof t=="object"&&!Array.isArray(t)}}const g=new h;chrome.runtime.onMessage.addListener((...c)=>g.handleMessage(...c))});export default p();
