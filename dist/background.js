var m=(l,t)=>()=>(t||l((t={exports:{}}).exports,t),t.exports);var p=m((k,d)=>{class f{constructor(t,r,s=["user","assistant"]){this.payload=t,this.markdownMessages=r,this.roles=s}compile(){var e;const t=(e=this.payload)==null?void 0:e.mapping;if(!t||typeof t!="object"||!this.markdownMessages||typeof this.markdownMessages!="object")return"";const r=this.extractTitle(this.payload),s=this.mapMessages(t);return this.renderMarkdown(s,r)}extractTitle(t){return typeof(t==null?void 0:t.title)=="string"?t.title.trim():""}mapMessages(t){var s;const r=[];for(const e of Object.values(t)){const n=e==null?void 0:e.message;if(!n)continue;const i=(n==null?void 0:n.id)??null;if(!i)continue;const o=(s=n==null?void 0:n.author)==null?void 0:s.role;if(!o||!Array.isArray(this.roles)||!this.roles.includes(o))continue;const a=this.markdownMessages[i];a&&r.push({role:o,content:a,time:this.formatTimestamp(n==null?void 0:n.create_time),id:(n==null?void 0:n.id)??null,status:(n==null?void 0:n.status)??null})}return r}formatTimestamp(t){if(typeof t!="number"||Number.isNaN(t))return"unknown";const r=new Date(t*1e3);return Number.isNaN(r.getTime())?"unknown":r.toISOString().replace("T"," ").replace("Z"," UTC")}capitalize(t){return t?t.charAt(0).toUpperCase()+t.slice(1):""}renderMarkdown(t,r){const s=[];r&&s.push(`# ${r}


`);for(const e of t){const n=[];n.push(`> ${this.capitalize(e.role)} â€“ ${e.time}`),n.push(e.content),s.push(n.join(`
`))}return s.join(`

`)}}d.exports=f;const w=Object.freeze({download:"CHATGPT_SAVE_DOWNLOAD_REQUEST"});class h{handleMessage(t,r,s){if(this.isPlainObject(t)&&t.type===w.download)return this.processDownload(t.payload).then(e=>s({ok:!0,...e})).catch(e=>{console.error("ChatGPT Save: download request failed.",e),s({ok:!1,error:(e==null?void 0:e.message)||String(e)})}),!0}async processDownload(t){const r=this.normalizeFormat(t==null?void 0:t.format),s=this.requireConversation(t==null?void 0:t.openAIResponse),e=this.deriveFilenameBase(s);if(r==="markdown"){const o=(t==null?void 0:t.markdownMessages)||{},c=new f(s,o).compile()||"",u=`${e}.md`;return await this.triggerDownload(u,c,"text/markdown"),{format:r,filename:u}}const n=JSON.stringify(s,null,2),i=`${e}.json`;return await this.triggerDownload(i,n,"application/json"),{format:"json",filename:i}}normalizeFormat(t){return typeof t!="string"?"json":t.toLowerCase()==="markdown"?"markdown":"json"}requireConversation(t){if(!this.isPlainObject(t))throw new Error("openAI response payload missing or invalid.");return t}async triggerDownload(t,r,s){const e=await this.encodeDataUrl(r,s);await new Promise((n,i)=>{chrome.downloads.download({url:e,filename:t,saveAs:!1},o=>{var a;if(chrome.runtime.lastError||typeof o>"u"){i(new Error(((a=chrome.runtime.lastError)==null?void 0:a.message)||"Download failed."));return}n(o)})})}async encodeDataUrl(t,r){const e=await(t instanceof Blob?t:new Blob([t],{type:`${r};charset=utf-8`})).arrayBuffer(),n=new Uint8Array(e);let i="";const o=32768;for(let c=0;c<n.length;c+=o){const u=n.subarray(c,c+o);i+=String.fromCharCode.apply(null,u)}const a=btoa(i);return`data:${r};base64,${a}`}deriveFilenameBase(t){const r=[t.title,t.id,t.conversation_id];for(const s of r){const e=this.slugify(s);if(e)return e}return"chatgpt-conversation"}slugify(t){return typeof t!="string"?"":t.trim().toLowerCase().replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"")}isPlainObject(t){return t!==null&&typeof t=="object"&&!Array.isArray(t)}}const g=new h;chrome.runtime.onMessage.addListener((...l)=>g.handleMessage(...l))});export default p();
